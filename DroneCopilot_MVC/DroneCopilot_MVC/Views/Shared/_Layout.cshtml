<!DOCTYPE html>
<html>
<head>
    <!-- BING MAPS STUFF! -->
    <!-- BING MAPS API Key: ArWZIz4IM2XQFf8gG1WzQMsdjVxubILEA6RSd96MqVnMqbX2g4Ov_VDBL_D4hlz_ -->
    <meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
    <script type="text/javascript" src="~/Scripts/Geolocation.js"></script>
    <script type="text/javascript" src="~/Scripts/no-fly.js"></script>
    <script type="text/javascript" src="~/Scripts/powerplants.js"></script>
    <script type="text/javascript" src="~/Scripts/military.js"></script>
    <script type="text/javascript">
        function resized() {
            document.getElementById("map-container").setAttribute("style", "height: " + (parseInt(window.innerHeight) - document.getElementById("navbar-menu").getAttribute("height") - 50) + "px; width: " + window.innerWidth + "px;");
        }
    </script>
    <script type='text/javascript' src='http://www.bing.com/api/maps/mapcontrol?callback=getMap' ></script> <!-- async defer -->

    <!-- /BING MAPS STUFF! -->

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - Your drone/multicopter co-pilot</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")


</head>
<body onresize="resized()">
    <div class="navbar navbar-inverse navbar-fixed-bottom" id="navbar-menu">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Drone Copilot", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse" >
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Map", "Index", "Home")</li>
                    <li>@Html.ActionLink("Data", "Data", "Home")</li>
                    <li>@Html.ActionLink("Settings", "Settings", "Home")</li>
                </ul>
            </div>
        </div>
    </div>
    <!--<div class="container body-content">-->
            @RenderBody()
    <script type="text/javascript" src="~/Scripts/Geolocation.js"></script>
   <script type="text/javascript">

       if (navigator.geolocation) {
           //navigator.geolocation.watchPosition(showPosition,showError); //Andrejs Code
           // navigator.geolocation.getCurrentPosition(showPosition, showError);
           navigator.geolocation.getCurrentPosition(geoSuccess, showError, geoOptions); //Cryptos Code
       } else {
           alert("You must allow location services to automatically position the map.");
       }

       // THIS WORKS. DON'T ASK
        document.getElementById("map-container").setAttribute("style", "height: " + (parseInt(window.innerHeight) - document.getElementById("navbar-menu").getAttribute("height") - 50) + "px; width: " + window.innerWidth + "px;");

    </script>
    

    <script type='text/javascript'>
        function getMap() {
            getLocation();
            Microsoft.Maps.registerModule("CircleModule", "Scripts/CircleModule.js");
            //console.log("Position " + startPos.coords.latitude + " " + startPos.coords.longitude); //spukuva


                    var map = new Microsoft.Maps.Map(document.getElementById('myMap'), {
                        credentials: 'ArWZIz4IM2XQFf8gG1WzQMsdjVxubILEA6RSd96MqVnMqbX2g4Ov_VDBL_D4hlz_',
                        center: new Microsoft.Maps.Location(startPos.coords.latitude, startPos.coords.longitude),
                        zoom: 14,
                        mapTypeId: Microsoft.Maps.MapTypeId.aerial
                    });

                    Microsoft.Maps.loadModule('Microsoft.Maps.GeoJson', function () {
                        var featureCollection = Microsoft.Maps.GeoJson.read(noFly);
                        for (var i = 0; i < featureCollection.length; i++) {
                            map.entities.push(featureCollection[i]);
                            var centerr = new Microsoft.Maps.Location(featureCollection[i].geometry.bounds[0], featureCollection[i].geometry.bounds[1]);
                            Microsoft.Maps.loadModule("CircleModule", function () {

                                var circle = new BM.Circle(centerr, 4023, 'm', {
                                    fillColor: new Microsoft.Maps.Color(127, 255, 0, 0),
                                    strokeColor: new Microsoft.Maps.Color(127, 255, 255, 0),
                                    strokeThickness: 1
                                });

                                map.entities.push(circle);

                                
                            });
                        }
                    });

                    Microsoft.Maps.loadModule('Microsoft.Maps.GeoJson', function () {
                        var featureCollection = Microsoft.Maps.GeoJson.read(powerPlants);
                        for (var i = 0; i < featureCollection.length; i++) {
                            map.entities.push(featureCollection[i]);
                            var centerr = new Microsoft.Maps.Location(featureCollection[i].geometry.bounds[0], featureCollection[i].geometry.bounds[1]);
                            Microsoft.Maps.loadModule("CircleModule", function () {

                                var circle = new BM.Circle(centerr, 1000, 'm', {
                                    fillColor: new Microsoft.Maps.Color(127, 255, 0, 0),
                                    strokeColor: new Microsoft.Maps.Color(127, 255, 255, 0),
                                    strokeThickness: 1
                                });

                                map.entities.push(circle);
                            });
                        }
                    });


                    Microsoft.Maps.loadModule('Microsoft.Maps.GeoJson', function () {
                        var featureCollection = Microsoft.Maps.GeoJson.read(militaryUS, { polygonOptions: { fillColor: 'rgba(255, 0, 0, 0.5)' } }
);
                        for (var i = 0; i < featureCollection.length; i++) {
                            map.entities.push(featureCollection[i]);
                        }
                    });



            //me
                    var pushpin = new Microsoft.Maps.Pushpin(map.getCenter(), {
                        icon: '<svg height="50" id="svg3017" version="1.0" width="50" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:svg="http://www.w3.org/2000/svg"><defs id="defs3019"/><g id="g3840" transform="translate(-0.00615286,0.01599973)"><path d="M 35.787402,34.334648 C -9.992126,80.149611 -10.027559,154.52363 35.751968,200.3386 c 40.925197,40.92519 104.740162,45.24803 150.519682,13.00393 4.88977,8.25591 8.7874,16.29922 11.01969,23.74016 3.18897,11.01969 2.87008,23.77559 0,35.71654 -2.30315,7.75984 -6.48425,16.26378 -11.72835,24.94488 -45.81496,-32.81102 -110.055116,-28.66535 -151.192911,12.50788 -45.814961,45.77953 -45.814961,120.18898 -0.03543,165.96851 45.779527,45.77953 120.224401,45.77953 166.003931,0 40.9252,-40.9252 45.24803,-104.70473 13.00394,-150.48426 8.29134,-4.88976 16.33465,-8.85827 23.77559,-11.05512 10.98425,-3.18897 23.74016,-2.87008 35.6811,0 7.75984,2.30315 16.26378,6.51969 24.94488,11.76378 -32.81102,45.81497 -28.62992,110.01969 12.50788,151.15749 45.77953,45.81497 120.18897,45.81497 165.9685,0.0354 45.81496,-45.77954 45.81496,-120.22442 0,-166.00395 -40.92519,-40.9252 -104.74016,-45.28347 -150.51968,-13.00394 -4.88977,-8.25591 -8.7874,-16.33465 -11.01969,-23.77559 -3.18897,-10.98425 -2.87008,-23.74016 0,-35.68111 2.33858,-7.75984 6.48425,-16.22834 11.72835,-24.90945 45.85039,32.81103 110.09055,28.62993 151.26378,-12.50787 45.77953,-45.77953 45.77953,-120.224419 0,-166.003949 -45.81496,-45.814964 -120.18898,-45.779531 -166.00394,0.03543 -40.9252,40.925199 -45.28346,104.704729 -13.03937,150.484269 -8.2559,4.88976 -16.29921,8.7874 -23.74016,11.01968 -11.01968,3.18898 -23.77559,2.87008 -35.71653,0 -7.75984,-2.33858 -16.22835,-6.51968 -24.87402,-11.72835 32.77559,-45.85039 28.59449,-110.090557 -12.57874,-151.228355 -45.77953,-45.779531 -120.153538,-45.779531 -165.933065,0 z m 7.015748,7.051181 c 41.988189,-41.98819124 109.91339,-41.98819124 151.90157,0 37.87796,37.842522 41.63386,96.838591 11.16142,138.826781 -27.60236,-18.49606 -55.20472,-45.2126 -65.87008,-55.94882 1.62992,-5.0315 1.41733,-10.55906 -0.60236,-15.48426 12.29528,-9.212595 23.77559,-19.346454 33.76772,-30.968501 13.46456,-16.866143 21.29527,-39.968507 1.48819,-28.877955 -7.79528,4.429134 -22.53544,17.078741 -36.70867,38.870081 -2.62204,4.03937 -5.24409,7.440945 -7.75984,10.346457 -8.5748,-5.102362 -19.84252,-4.003937 -27.2126,3.366138 l -0.35433,0.38977 c -6.307083,6.55512 -7.724406,16.05118 -4.429131,23.98819 -12.295275,9.2126 -23.811023,19.31102 -33.803149,30.9685 -13.464567,16.83071 -21.295276,39.96851 -1.452756,28.87796 7.759842,-4.42913 22.5,-17.07874 36.673228,-38.87008 2.622048,-4.07481 5.208658,-7.47638 7.724408,-10.38189 5.42126,3.22441 11.87008,3.9685 17.75197,2.23228 11.16142,11.16142 37.70079,38.69292 55.91339,66.18898 C 139.00394,234.81498 80.468504,230.95277 42.80315,193.25198 0.81496063,151.26379 0.81496063,83.374021 42.80315,41.385829 z M 41.385827,317.26774 c 37.877952,-37.87796 96.803153,-41.563 138.826773,-11.16142 -18.5315,27.6378 -45.24803,55.24016 -55.94882,65.90551 -5.06693,-1.62992 -10.59449,-1.48818 -15.51969,0.56693 C 99.531496,360.31892 89.433071,348.8386 77.811024,338.84648 60.944882,325.38191 37.84252,317.5512 48.897638,337.35829 c 4.464567,7.79528 17.114173,22.5 38.905512,36.67323 4.03937,2.65748 7.476377,5.24409 10.381889,7.75984 -5.137795,8.57481 -4.03937,19.84252 3.366141,27.2126 l 0.38976,0.38977 c 6.59056,6.27165 15.98032,7.72441 23.91733,4.42913 9.2126,12.29528 19.34645,23.77559 30.9685,33.76772 16.86614,13.5 39.96851,21.33071 28.91339,1.48819 -4.46457,-7.75984 -17.11418,-22.5 -38.90551,-36.67323 -4.03937,-2.65748 -7.44095,-5.2441 -10.34646,-7.75985 3.22441,-5.42126 3.9685,-11.83464 2.23228,-17.71653 11.51575,-11.51575 38.83465,-37.73622 66.18898,-55.87796 29.90551,41.95276 26.04331,100.4882 -11.58662,138.11812 -42.02362,42.02363 -109.948814,41.98819 -151.937003,0 -41.9881892,-41.98819 -41.9881892,-109.91339 0,-151.90158 z M 318.72047,42.803152 c 41.98819,-41.98819132 109.87795,-41.98819132 151.86614,0 42.02363,41.988192 41.98819,109.913398 0,151.901588 -37.84252,37.84252 -96.76771,41.56299 -138.79133,11.16141 17.85826,-26.5748 43.40551,-53.32677 55.02755,-64.94882 0.38977,-0.4252 0.60237,-0.60236 0.92126,-0.95669 5.06693,1.62992 10.59449,1.45275 15.51969,-0.60236 9.17716,12.29527 19.31102,23.77559 30.93307,33.76772 16.83071,13.46456 39.9685,21.29527 28.87795,1.45275 -4.42913,-7.75984 -17.07874,-22.5 -38.87008,-36.67323 -4.0748,-2.62205 -7.47637,-5.20866 -10.38189,-7.72441 5.10237,-8.5748 4.00394,-19.84252 -3.36614,-27.2126 l -0.38976,-0.35433 C 403.51181,96.307093 394.05118,94.818904 386.11417,98.114179 376.90157,85.818903 366.76772,74.37402 355.11024,64.381894 338.27953,50.917326 315.14173,43.086617 326.23228,62.893705 c 4.42914,7.795276 17.07874,22.500001 38.87008,36.67323 4.07481,2.657485 7.47638,5.244095 10.38189,7.759845 -3.22441,5.38583 -3.9685,11.83464 -2.23228,17.75197 -11.12599,11.12598 -38.65748,37.66535 -66.18898,55.87795 C 277.15748,139.00395 281.01968,80.468509 318.72047,42.803152 z M 306.14173,331.75986 c 27.6378,18.5315 55.24016,45.3189 65.87008,56.01969 -1.59449,5.0315 -1.41732,10.52362 0.6378,15.41339 -12.29528,9.2126 -23.81103,19.34646 -33.80315,30.9685 -13.46457,16.86615 -21.29528,39.96851 -1.45276,28.91339 7.75984,-4.46456 22.5,-17.11417 36.67323,-38.90551 2.62205,-4.03937 5.24409,-7.47638 7.72441,-10.34646 8.5748,5.10236 19.84252,4.00394 27.2126,-3.40157 l 0.35433,-0.35434 c 6.30708,-6.59055 7.75984,-16.01574 4.5,-23.95275 12.29527,-9.2126 23.77559,-19.34646 33.76771,-31.00394 13.46457,-16.83071 21.29528,-39.93307 1.48819,-28.87796 -7.79527,4.46457 -22.53543,17.11418 -36.70866,38.90552 -2.62205,4.03937 -5.24409,7.44094 -7.75984,10.34646 -5.38583,-3.22441 -11.83465,-3.96851 -17.71654,-2.23229 -11.16141,-11.12598 -37.70078,-38.65748 -55.91338,-66.18898 41.95275,-29.94095 100.48819,-26.04331 138.15354,11.62205 41.98819,41.98819 42.02362,109.94883 0.0354,151.93702 -41.98818,41.98819 -109.94881,41.95276 -151.937,-0.0354 -37.87796,-37.87795 -41.563,-96.80315 -11.12599,-138.82678 z" id="path3842" style="fill-opacity:1;fill-rule:nonzero;stroke:none"/></g></svg>',
                        anchor: new Microsoft.Maps.Point(25, 25) });
                        map.entities.push(pushpin);
                   


                }
    </script>
    <!--
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - DroneCopilot for web.<br />
            Developed by Andrej Georgievski, Kristijan Gjoshev and Stefan Cokovski.<br />
            DroneCopilot is a solution to the challenge <a href="http://2016.spaceappschallenge.org/challenges/aero/dont-crash-my-drone" target="_blank">Don't crash my drone</a> at <a href="http://2016.spaceappschallenge.org/"  target="_blank">2016 NASA Space Apps Challenge</a>.
            </p>
        </footer>
    
    -->
    <!--</div>-->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")

    @RenderSection("scripts", required: false)
</body>
</html>
